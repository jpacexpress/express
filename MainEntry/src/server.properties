# The webRoot directory:
# the directory that the servlet engine regards as the place where applications 
# that use the servlet engine should be installed.  Generally, it is safe to leave
# this at the default setting of __AUTODETECT__.  When the SmartClient server is
# started, it logs a message to stdout telling you the autodetected path to your
# webRoot.  If this path is not your actual webRoot, then you'll want to override
# this config parameter here.
#
# Valid values: 
#
# 1. Absolute path to the webRoot directory
#
# 2. Special token:  __AUTODETECT__
#    When this token is used, SmartClient attempts to auto-detect the webRoot using
#    standard servlet APIs.  This may or may not work - depending on your
#    container type and deployment type.  For example, WAR/EAR deployments
#    on some containers never make it to disk, and so the container refuses
#    to provide the webRoot path.
#  
#    If SmartClient cannnot detect the webRoot, it sets the webRoot to
#    __USE_CONTAINER__ (see below).
#
# 3.  Special token: __USE_CONTAINER__
#     When this token is used, SmartClient uses standard servet APIs for accessing
#     filesystem resources.  This is slower than direct file access and, since
#     the servlet APIs provide no mechanism for writing to disk, means that some
#     development tools like the FileAssembler will not work.
#
webRoot: __AUTODETECT__

# Set this to the GWT module name.
gwtModuleName: mainentry

# if you've moved the isomorphic directory from its default location in webRoot,
# set the root-relative path to it here
#
# For example, if in your deployment the 'isomorphic' dir is in /foo/bar, then set
# then you'll need to set this to foo/bar/isomorphic
isomorphicPathRootRelative: $gwtModuleName/sc



# -------------- PICK DATABASE TO USE --------------------
#
# The SmartClient SDK ships with examples that use a database as the persistence
# layer.  By default, the SDK uses a built-in version of HSQLDB, but you can
# specify a different database to use here.

# which database do you want to use?  HSQLDB is enabled by default.
#sql.defaultDatabase: HSQLDB

# If you want to use Mysql instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
sql.defaultDatabase: Mysql

# If you want to use Oracle instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: Oracle

# If you want to use Postgres instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: PostgreSQL

# If you want to use DB2 instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: DB2

# -------------- SETTINGS FOR HSQLDB --------------------

#sql.HSQLDB.database.type: hsqldb
#sql.HSQLDB.interface.type: driverManager

#sql.HSQLDB.driver: org.hsqldb.jdbcDriver
#sql.HSQLDB.driver.url: jdbc:hsqldb:hsql://localhost/isomorphic
# -------------- SETTINGS FOR MYSQL --------------------  
  
# These are the settings for use with the Mysql database.  If you have  
# just done a fresh install of MySQL on the same machine where you are  
# running your servlet engine, the values provided below will probably  
# just work on most platforms.  
  
# Configuration for Mysql Connector/J  
sql.Mysql.database.type: mysql
sql.Mysql.database.ansiMode: false
sql.Mysql.interface.type: dataSource
sql.Mysql.driver: com.mysql.jdbc.jdbc2.optional.MysqlDataSource
# name of the database to use  
sql.Mysql.driver.databaseName: jpac
# hostname and port where the database server is installed  
sql.Mysql.driver.serverName: localhost
sql.Mysql.driver.portNumber: 3306
# username and password that can create and modify tables in that database  
# this user must have the following privileges for the system to function  
# properly: create/alter/drop table; insert/update/replace/delete rows.  
sql.Mysql.driver.user: root
sql.Mysql.driver.password: 7234

sql.Mysql.driver.useUnicode: true
sql.Mysql.pool.enabled: true
sql.Mysql.interface.credentialsInURL: true
sql.Mysql.driver.networkProtocol: tcp
sql.Mysql.autoJoinTransactions: true
sql.Mysql.driver.context: 

# -------------- LOADING APP AND DATASOURCE DEFINITIONS --------------------

# Where the system looks for DataSource definition files ([dataSourceId].ds.xml or
# [dataSourceID].ds.js).  It's useful to put all your DataSources in one 
# directory since DataSources are frequently shared between applications.  
# "project.datasources" is also where the DataSource Importer tool looks 
# for available DataSources.
project.datasources: $webRoot/ds
project.ui: $webRoot/shared/ui
project.apps: $webRoot/shared/app

# -------------- Other settings --------------------
# The setting RPCManager.enabledBuiltinMethods enables or disables the BuiltInRPCs - RPC calls
# that are built into the SmartClient Server.  The setting below reflects the framework default
# of enabling only those RPCs that are typically needed in an application.
# 
# See the JavaDoc for com.isomorphic.rpc.BuiltinRPC and com.isomorphic.tools.BuiltinRPC for all
# available builtinRPCs and their behavior.
# 
# Note that many of the BuiltinRPCs are designed for use by tools such as Visual Builder, and
# provide services such as direct access to the file system (for load and save of screens) that
# would be unsafe to expose to untrusted users.
#
#RPCManager.enabledBuiltinMethods: getPdfObject, xmlToJS, uploadProgressCheck, exportClientData, downloadClientExport, setAttributes

# Note: modulesDir is only used with the loadISC and loadModules JSP tags; if
# you intend to use those tags, do not change this setting
modulesDir: modules/

# -------------- SETTINGS FOR THE REAL-TIME MESSAGING MODULE --------------------

# Which dispatcher do you want to use for user registration/message queueing?

# If you want to have simple one-JVM messaging, uncomment the following line
# and comment out the other messaging.dispatcherImplementer line:
#messaging.dispatcherImplementer: com.isomorphic.messaging.LocalMessageDispatcher

# If you want to have JMS-backed messaging, uncomment the following line and
# comment out the other messaging.dispatcherImplementer line:
#messaging.dispatcherImplementer: com.isomorphic.messaging.JMSMessageDispatcher

# How often do we send keepalives to the client (ms)
#messaging.keepaliveInterval: 3000

# How long the client waits after the keepaliveInterval before re-establishing
# the connection (ms)
#messaging.keepaliveReestablishDelay: 1000

# How long the client waits for the connect handshake to complete before
# retrying
#messaging.connectTimeout: 4000

# Connection time to live - the maximum amount of time a persistent connection
# is allowed to stay open before being re-established (ms)
#messaging.connectionTTL: 120000

# Total response size to pad out to in order to defeat intervening
# bufferring by proxies (bytes)
#messaging.flushBufferSize: 8096

# JMS configuration - for JMSMessageDispatcher only
#messaging.jms.context: _container_
#messaging.jms.jndiPrefix: jms
#messaging.jms.topicConnectionFactory: TopicConnectionFactory

# -------------- Other settings --------------------
# The setting RPCManager.enabledBuiltinMethods enables or disables the BuiltInRPCs - RPC calls
# that are built into the SmartClient Server.  The setting below reflects the framework default
# of enabling only those RPCs that are typically needed in an application.
# 
# See the JavaDoc for com.isomorphic.rpc.BuiltinRPC and com.isomorphic.tools.BuiltinRPC for all
# available builtinRPCs and their behavior.
# 
# Note that many of the BuiltinRPCs are designed for use by tools such as Visual Builder, and
# provide services such as direct access to the file system (for load and save of screens) that
# would be unsafe to expose to untrusted users.
#
#RPCManager.enabledBuiltinMethods: getPdfObject, xmlToJS, uploadProgressCheck, exportClientData, downloadClientExport, setAttributes
